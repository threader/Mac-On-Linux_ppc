*showstack
*showstack
nvramrc
boot-command
nvramrc
oem-logo
oem-banner
output-device
input-device
diag-file
diag-device
boot-file
boot-device
selftest-#megs
screen-#rows
screen-#columns
pci-probe-list
load-base
virt-size
virt-base
real-size
real-base
use-nvramrc?
oem-logo?
oem-banner?
fcode-debug?
diag-switch?
auto-boot?
real-mode?
little-endian?
make-cpu-properties
nvunalias
$nvunalias
nvalias
$nvalias
nvrecover
nvrun
nvstore
nvquit
nvedit
set-defaults
set-default
nodefault-bytes
setenv
$setenv
printenv
nv-free
assign-addresses
make-properties
probe-pci
probing-pci?
eject
dir
boot
$boot
reload
load
go
init-program
loadmapsize
loadsize
loadaddr
+dis
dis
(dis1
dis1
dis_ptr
see
(see)
release-virt
claim-virt
release-real
claim-real
release-mem
claim-mem
(is-user-word)
is-remove
is-install
fb8-install
io
output
input
$open-package
find-package
end-package
begin-package
unselect-dev
select-dev
devalias
show-devs
dev
find-device
interpose
open-dev
apply
execute-device-method
ihandle>phandle
pop-package
push-package
close-dev
close-package
open-package
mac-address
free-virtual
dump-device-tree
.properties
ls
pwd
finish-device
new-device
set-args
peer
child
get-inherited-property
get-my-property
get-package-property
delete-property
next-property
aapl,connector
aapl,slot-name
aapl,interrupts
reg
model
device-type
device-name
decode-bytes
decode-string
decode-phys
decode-int
encode-cat
encode-bytes
encode-string
encode-pci-reg
encode-reg
encode-phys
encode-3ints
encode-2ints
encode-int
encode+
property
device-end
fb8-draw-logo
fb8-write
fb8-draw-character
fb8-toggle-cursor
fb8-delete-characters
fb8-insert-characters
fb8-insert-lines
fb8-delete-lines
fb8-blink-screen
fb8-invert-screen
fb8-erase-screen
fb8-reset-screen
>font
set-font
default-font
draw-logo
delete-lines
insert-lines
delete-characters
insert-characters
invert-screen
blink-screen
erase-screen
toggle-cursor
reset-screen
draw-character
background-color
foreground-color
#columns
#lines
line#
column#
inverse-screen?
inverse?
fontbytes
char-height
char-width
font-adr
window-left
window-top
screen-width
screen-height
frame-buffer-adr
byte-load-file
rom-@
fcode-end
fcode-version2
fcode-version1
forget
diagnostic-mode?
memory-test-suite
mask
blpatch
brpatch
forth
environment?
help
external
headers
headerless
rl!
rl@
rw!
rw@
rb!
rb@
shut-down
reset-all
.of-regs
.registers
$callback
callback
%sdr1
%sprg3
%sprg2
%sprg1
%sprg0
%fpscr
%mq
%dsisr
%dar
%xer
%cr
%ctr
%lr
%srr1
%srr0
%ir
%iv
%r31
%r30
%r29
%r28
%r27
%r26
%r25
%r24
%r23
%r22
%r21
%r20
%r19
%r18
%r17
%r16
%r15
%r14
%r13
%r12
%r11
%r10
%r9
%r8
%r7
%r6
%r5
%r4
%r3
%r2
%r1
%r0
do-translate
do-unmap
do-map
__m_
_i_g
w___
state-valid
init-nvram
bye
kbd
ttya
install-console
probe-all
quit
supress-banner
banner
noshowstack
showstack
default-status
status
dl
eval
evaluate
{
->
(
\
dumpl
dump
h#
d#
o#
b#
>number
.(
abort"
"
bad-"
."
s"
<s">
<s",>
cstr=
$=
control
ascii
char
[char]
achar
words
(words)
endof
of
endcase
case
?leave
+loop
loop
?do
do
again
until
repeat
while
begin
then
else
if
to
to-reg
c;
end-code
(end-code)
label
code
(code)
filler
field
struct
2constant
constant
defer
buffer:
value
variable
immediate
]
[
recurse
recursive
;
:
does>
(does>)
create
$create
alias
parse-2int
parse-3hex
parse-2hex
parse-1hex
parse-nhex
parse-ints
right-parse-string
left-parse-string
null?
[compile]
postpone
compile
compile,
literal,
literal
[']
'
word
parse-word
parse
source
exit?
map-low
$call-parent
my-address
my-space
my-unit
my-args
my-parent
?my-self
$call-method
call-package
find-method
behavior
body>
$find
find
canonical
>in
#tib
-trailing
accept
expect
.s
?
.b
.o
.d
.h
.x
u.h
.r
u.r
.
u.
s.
(u.)
(.)
#s
#
u#>
u#s
u#
0+
sign
#>
<#
hold
chara?
pad
upc-hex?
(holdp)
$number
digit
lcc
upc
between
lcc-z
lcc-a
upc-z
upc-a
upc-9
upc-0
binary
octal
decimal
hex
span
base
spin-every
_spin-every
(spin
_spin
spin
tab-to
spaces
space
cr
(cr
linefeed
carret
lines/page
#out
#line
ms
get-msecs
sccad
sccac
$c,
3drop
3dup
erase
blank
bounds
unaligned-w!
unaligned-w@
unaligned-l!
unaligned-l@
lpoke
lpeek
wpoke
wpeek
cpoke
cpeek
abort
key?
key
type
emit
stdout
stdin
even
not
fcode-revision
noop
fm/mod
//
*/mod
*/
sm/rem
mu/mod
(msigns)
dnegate
s>d
xa1+
xa+
/x*
/x
/n
/l
/w
/c
true
false
cold-load
[']rom-c@
swizzle-c@
byte-load
free-hdrs
roll
alignd
align
allot
c,
w,
l,
,
(latest)
instance
instance?
>body
>flags
?instance
last!
last@
last?
my-self
active-package
global-words
state?
state
free-mem
alloc-mem
ferror
(vfind)
pack
cntlz
real?
swizzle?
little?
xbflips
xwflips
xlflips
lwflips
lwflip
lbflips
lbflip
wbflips
wbflip
bwjoin
wbsplit
bljoin
lbsplit
wljoin
lwsplit
tib
set-token
get-token
@startvec
(dl)
scc-write
scc-read
comp
filll
fill
move
count
bell
bs
bl
invert
xor
or
and
min
max
within
u>=
u>
u<=
u<
>=
>
<=
<
<>
=
0>=
0>
0<=
0<
0<>
0=
>>a
>>
rshift
<<
lshift
abs
negate
um/mod
u/mod
/mod
mod
u2/
2/
/
um*
m*
/w*
2*
d-
-
d+
+
aligned
/n*
/l*
cells
/c*
chars
4-
cell-
na1+
4+
la1+
cell+
2-
2+
wa1+
1-
ca1+
1+
char+
na+
la+
wa+
ca+
8
4
3
2
1
0
-1
r@
r>
>r
depth
nip
tuck
pick
2swap
swap
-rot
2rot
rot
2drop
drop
2over
over
?dup
2dup
dup
on
off
+!
^tlbie
^sync
^icbi
^dcbf
zb!
zw!
zl!
zb@
zw@
zl@
xb!
xw!
xl!
xd!
xb@
xw@
xl@
xd@
2!
l!
!
w!
c!
2@
l@
@
<w@
w@
c@
j
i
cache-flush
cache-zero
<isi-int>
<dsi-int>
virt_base
real_base
unmap-page
map-page
hid1!
hid1@
hid0!
hid0@
sdr1!
sdr1@
sr@
sr!
unloop
leave
exit
execute
alloc-here
here!
here
code!
clear
(abort)
throw
catch
msr!
msr@
sprg3!
sprg3@
dec!
dec@
tb!
tb@
rtc@
<pvr1@>
pvr@
my-self+
rmyself!
*
*
*